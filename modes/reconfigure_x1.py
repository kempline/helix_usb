from modes.standard import Standard
from out_packet import OutPacket
import logging
log = logging.getLogger(__name__)


class ReconfigureX1(Standard):
	def __init__(self, helix_usb):
		Standard.__init__(self, helix_usb=helix_usb, name="reconfigure_x1")

	def start(self):
		log.info('Starting mode')

		self.helix_usb.x1x10_cnt = 0x2

		data = [0xc, 0x0, 0x0, 0x28, 0x1, 0x10, 0xef, 0x3, 0x0, 0x0, 0x0, 0x2, 0x0, 0x1, 0x0, 0x21, 0x0, 0x10, 0x0, 0x0]
		self.helix_usb.endpoint_0x1_out(data)

	def shutdown(self):
		log.info('Shutting down mode')

	def data_in(self, data):

		if self.helix_usb.my_byte_cmp(left=data, right=[0xc, 0x0, 0x0, 0x28, 0xef, 0x3, 0x1, 0x10, 0x0, 0x0, 0x0, 0x2, 0x0, 0x1, 0x0, 0x1, 0x0, 0x2, 0x0, 0x0], length=20):
			# out = OutPacket(data=[0x8, 0x0, 0x0, 0x18, 0x2, 0x10, 0xf0, 0x3, 0x0, "XX", 0x0, 0x10, 0x9, 0x10, 0x0, 0x0])
			# self.helix_usb.out_packet_to_endpoint_0x1(out)

			# self.helix_usb.start_x2x10_keep_alive_thread(delay=1.0)
			out = OutPacket(data=[0x11, 0x0, 0x0, 0x18, 0x1, 0x10, 0xef, 0x3, 0x0, "XX", 0x0, 0x4, 0x0, 0x10, 0x0, 0x0, 0x1, 0x0, 0x2, 0x0, 0x1, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0])
			self.helix_usb.out_packet_to_endpoint_0x1(out)

		elif self.helix_usb.my_byte_cmp(left=data, right=[0x11, 0x0, 0x0, 0x18, 0xef, 0x3, 0x1, 0x10, 0x0, 0x2, 0x0, 0x4], length=12):
			# out = OutPacket(data=[0x8, 0x0, 0x0, 0x18, 0x1, 0x10, 0xef, 0x3, 0x0, "XX", 0x0, 0x8, 0x20, 0x10, 0x0, 0x0])
			# self.helix_usb.out_packet_to_endpoint_0x1(out)
			self.helix_usb.start_x1x10_keep_alive_thread(delay=0.0)
			self.helix_usb.reconfigured_x1 = True
			self.helix_usb.switch_mode()

		elif self.helix_usb.check_keep_alive_response(data):
			return False  # don't print incoming message to console

		else:
			hex_str = ''.join('0x{:x}, '.format(x) for x in data)
			log.warning("Unexpected message in connect mode: " + str(hex_str))

		return True  # print incoming message to console