from modes.standard import Standard
from out_packet import OutPacket
import logging
log = logging.getLogger(__name__)


class Connect(Standard):
	def __init__(self, helix_usb):
		Standard.__init__(self, helix_usb=helix_usb, name="connect")
		self.alive_msg_counter = [0, 0, 0]
		self.reset_x1x10_done = False
		self.received_x11_on_x2 = False
		self.received_x11_on_x80 = False


	def start(self):
		log.info('Starting mode')

		self.helix_usb.x1x10_cnt = 0x2
		self.helix_usb.x2x10_cnt = 0x2
		self.helix_usb.x80x10_cnt = 0x2
		self.reset_x1x10_done = False

		data = [0xc, 0x0, 0x0, 0x28, 0x1, 0x10, 0xef, 0x3, 0x0, 0x0, 0x0, 0x2, 0x0, 0x1, 0x0, 0x21, 0x0, 0x10, 0x0, 0x0]
		self.helix_usb.endpoint_0x1_out(data)

	def shutdown(self):
		log.info('Shutting down mode')

	def data_in(self, data):

		if self.helix_usb.my_byte_cmp(left=data, right=[0xc, 0x0, 0x0, 0x28, 0xef, 0x3, 0x1, 0x10, 0x0, 0x0, 0x0, 0x2, 0x0, 0x1, 0x0, 0x1, 0x0, 0x2, 0x0, 0x0], length=20):
			out = OutPacket(data=[0x11, 0x0, 0x0, 0x18, 0x1, 0x10, 0xef, 0x3, 0x0, "XX", 0x0, 0x4, 0x0, 0x10, 0x0, 0x0, 0x1, 0x0, 0x5, 0x0, 0x1, 0x0, 0x0, 0x0, 0x5, 0x0, 0x0, 0x0])
			self.helix_usb.out_packet_to_endpoint_0x1(out)

		elif self.helix_usb.my_byte_cmp(left=data, right=[0x28, 0x0, 0x0, 0x18, 0xef, 0x3, 0x1, 0x10, 0x0, 0x2, 0x0, 0x4, 0x9, 0x2], length=14):
			out = OutPacket(data=[0x8, 0x0, 0x0, 0x18, 0x1, 0x10, 0xef, 0x3, 0x0, "XX", 0x0, 0x8, 0x20, 0x10, 0x0, 0x0])
			self.helix_usb.out_packet_to_endpoint_0x1(out)

		elif self.helix_usb.my_byte_cmp(left=data, right=[0x8, 0x0, 0x0, 0x18, 0xef, 0x3, 0x1, 0x10, 0x0, 0x3, 0x0, "XX", 0x9, 0x2, 0x0, 0x0], length=16):
			out = OutPacket(data=[0x8, 0x0, 0x0, 0x18, 0x1, 0x10, 0xef, 0x3, 0x0, "XX", 0x0, 0x2, 0x20, 0x10, 0x0, 0x0])
			self.helix_usb.out_packet_to_endpoint_0x1(out)
			# later - after reconfiguraion
			# self.helix_usb.start_x1x10_keep_alive_thread(delay=0.0)

		# start 80x10
		# ToDo falsche Response (falscher Kanal)
		elif self.helix_usb.my_byte_cmp(left=data, right=[0x8, 0x0, 0x0, 0x18, 0xef, 0x3, 0x1, 0x10, 0x0, 0x4, 0x0, "XX", 0x9, 0x2, 0x0, 0x0], length=16):
			out = OutPacket(data=[0xc, 0x0, 0x0, 0x28, 0x80, 0x10, 0xed, 0x3, 0x0, 0x0, 0x0, 0x2, 0x0, 0x1, 0x0, 0x21, 0x0, 0x10, 0x0, 0x0], delay=0.0)
			self.helix_usb.out_packet_to_endpoint_0x1(out)

		elif self.helix_usb.my_byte_cmp(left=data, right=[0xc, 0x0, 0x0, 0x28, 0xed, 0x3, 0x80, 0x10, 0x0, 0x0, 0x0, 0x2, 0x0, 0x1, 0x0, 0x1, 0x0, 0x2, 0x0, 0x0], length=20):
			out = OutPacket(data=[0x11, 0x0, 0x0, 0x18, 0x80, 0x10, 0xed, 0x3, 0x0, "XX", 0x0, 0x4, 0x0, 0x10, 0x0, 0x0, 0x1, 0x0, 0x6, 0x0, 0x1, 0x0, 0x0, 0x0, 0x6, 0x0, 0x0, 0x0])
			self.helix_usb.out_packet_to_endpoint_0x1(out)

		# ToDo falsche Response (falscher Kanal)
		elif self.helix_usb.my_byte_cmp(left=data, right=[0x11, 0x0, 0x0, 0x18, 0xed, 0x3, 0x80, 0x10, 0x0, 0x2], length=10):
			self.received_x11_on_x80 = True
			out = OutPacket(data=[0xc, 0x0, 0x0, 0x28, 0x2, 0x10, 0xf0, 0x3, 0x0, 0x0, 0x0, 0x2, 0x0, 0x1, 0x0, 0x21, 0x0, 0x10, 0x0, 0x0], delay=0.0)
			self.helix_usb.out_packet_to_endpoint_0x1(out)
			self.helix_usb.start_x80x10_keep_alive_thread(delay=0.0)

		# ToDo falsche Response (falscher Kanal)
		elif self.helix_usb.my_byte_cmp(left=data, right=[0xc, 0x0, 0x0, 0x28, 0xf0, 0x3, 0x2, 0x10, 0x0, 0x0, 0x0, 0x2, 0x0, 0x1, 0x0, 0x1, 0x0, 0x2, 0x0, 0x0], length=20):
			# out = OutPacket(data=[0x8, 0x0, 0x0, 0x18, 0x80, 0x10, 0xed, 0x3, 0x0, 0x3, 0x0, 0x8, 0x9, 0x10, 0x0, 0x0])
			# self.helix_usb.out_packet_to_endpoint_0x1(out)
			out = OutPacket(data=[0x11, 0x0, 0x0, 0x18, 0x2, 0x10, 0xf0, 0x3, 0x0, "XX", 0x0, 0x4, 0x0, 0x10, 0x0, 0x0, 0x1, 0x0, 0x4, 0x0, 0x1, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0])
			self.helix_usb.out_packet_to_endpoint_0x1(out)

		# ToDo falsche Response (falscher Kanal)
		elif self.helix_usb.my_byte_cmp(left=data, right=[0x11, 0x0, 0x0, 0x18, 0xf0, 0x3, 0x2, 0x10, 0x0, 0x2, 0x0, 0x4, 0x9, 0x2], length=14):
			self.received_x11_on_x2 = True
			self.helix_usb.start_x2x10_keep_alive_thread()
			# out = OutPacket(data=[0xc, 0x0, 0x0, 0x28, 0x1, 0x10, 0xef, 0x3, 0x0, 0x0, 0x0, 0x2, 0x0, 0x1, 0x0, 0x21, 0x0, 0x10, 0x0, 0x0])
			# self.helix_usb.out_packet_to_endpoint_0x1(out)

		# ToDo falsche Response (falscher Kanal)
		elif self.helix_usb.my_byte_cmp(left=data, right=[0x8, 0x0, 0x0, 0x18, 0xf0, 0x3, 0x2, 0x10, 0x0, 0x3, 0x0, 0x8, 0x9, 0x2, 0x0, 0x0], length=16):
			out = OutPacket(data=[0x19, 0x0, 0x0, 0x18, 0x80, 0x10, 0xed, 0x3, 0x0, "XX", 0x0, 0x4, 0x9, 0x10, 0x0, 0x0, 0x1, 0x0, 0x6, 0x0, 0x9, 0x0, 0x0, 0x0, 0x83, 0x66, 0xcd, 0x3, 0xe8, 0x64, 0x4c, 0x65, 0x80, 0x0, 0x0, 0x0], delay=0.140)
			self.helix_usb.out_packet_to_endpoint_0x1(out)

		elif self.helix_usb.my_byte_cmp(left=data, right=[0x54, 0x0, 0x0, 0x18, 0xed, 0x3, 0x80, 0x10, 0x0], length=9):
			out = OutPacket(data=[0x1c, 0x0, 0x0, 0x18, 0x80, 0x10, 0xed, 0x3, 0x0, "XX", 0x0, 0xc, 0x55, 0x10, 0x0, 0x0, 0x1, 0x0, 0x6, 0x0, 0xc, 0x0, 0x0, 0x0, 0x83, 0x66, 0xcd, 0x3, 0xe9, 0x64, 0x18, 0x65, 0x81, 0x76, 0xcc, 0x80])
			self.helix_usb.out_packet_to_endpoint_0x1(out)

		elif self.helix_usb.my_byte_cmp(left=data, right=[0x1f, 0x0, 0x0, 0x18, 0xed, 0x3, 0x80, 0x10, 0x0, "XX", 0x0, 0x4, 0x2e, 0x2, 0x0, 0x0, 0x0, 0x0, 0x6, 0x0, 0xf, 0x0, 0x0, 0x0, 0x83, 0x66, 0xcd, 0x3, 0xe9, 0x67, 0x0, 0x68, 0x82, 0x76, 0xcd, 0x0, 0x80, 0x77, 0x0, 0xdc], length=9):
			out = OutPacket(data=[0x19, 0x0, 0x0, 0x18, 0x80, 0x10, 0xed, 0x3, 0x0, "XX", 0x0, 0xc, 0x6c, 0x10, 0x0, 0x0, 0x1, 0x0, 0x6, 0x0, 0x9, 0x0, 0x0, 0x0, 0x83, 0x66, 0xcd, 0x3, 0xea, 0x64, 0x17, 0x65, 0xc0, 0x0, 0x0, 0x0])
			self.helix_usb.out_packet_to_endpoint_0x1(out)
		elif self.helix_usb.check_keep_alive_response(data):
			return False  # don't print incoming message to console
		else:
			hex_str = ''.join('0x{:x}, '.format(x) for x in data)
			log.warning("Unexpected message in connect mode: " + str(hex_str))

		if self.received_x11_on_x2 and self.received_x11_on_x80:
			self.helix_usb.connected = True
			self.helix_usb.switch_mode()

		return True  # print incoming message to console
		'''
		if self.helix_usb.my_byte_cmp(left=data, right=[0xc, 0x0, 0x0, 0x28, 0xef, 0x3, 0x1, 0x10, 0x0, 0x0, 0x0, 0x2, 0x0, 0x1, 0x0, 0x1, 0x0, 0x2, 0x0, 0x0], length=20):
			out = OutPacket(data=[0x11, 0x0, 0x0, 0x18, 0x1, 0x10, 0xef, 0x3, 0x0, "XX", 0x0, 0x4, 0x0, 0x10, 0x0, 0x0, 0x1, 0x0, 0x5, 0x0, 0x1, 0x0, 0x0, 0x0, 0x5, 0x0, 0x0, 0x0])
			self.helix_usb.out_packet_to_endpoint_0x1(out)

		# 2x10: start
		elif self.helix_usb.my_byte_cmp(left=data, right=[0xc, 0x0, 0x0, 0x28, 0xf0, 0x3, 0x2, 0x10, 0x0, 0x0, 0x0, 0x2, 0x0, 0x1, 0x0, 0x1, 0x0, 0x2, 0x0, 0x0], length=20):
			out = OutPacket(data=[0x11, 0x0, 0x0, 0x18, 0x2, 0x10, 0xf0, 0x3, 0x0, "XX", 0x0, 0x4, 0x0, 0x10, 0x0, 0x0, 0x1, 0x0, 0x4, 0x0, 0x1, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0])
			self.helix_usb.out_packet_to_endpoint_0x1(out)
			self.helix_usb.start_x2x10_keep_alive_thread()

		# x80x10: start
		elif self.helix_usb.my_byte_cmp(left=data, right=[0xc, 0x0, 0x0, 0x28, 0xed, 0x3, 0x80, 0x10, 0x0, 0x0, 0x0, 0x2, 0x0, 0x1, 0x0, 0x1, 0x0, 0x2, 0x0, 0x0], length=20):
			out = OutPacket(data=[0x11, 0x0, 0x0, 0x18, 0x80, 0x10, 0xed, 0x3, 0x0, "XX", 0x0, 0x4, 0x0, 0x10, 0x0, 0x0, 0x1, 0x0, 0x6, 0x0, 0x1, 0x0, 0x0, 0x0, 0x6, 0x0, 0x0, 0x0])
			self.helix_usb.out_packet_to_endpoint_0x1(out)
			self.helix_usb.start_x80x10_keep_alive_thread(delay=0.1)

		# x1x10: start
		elif self.helix_usb.my_byte_cmp(left=data, right=[0x28, 0x0, 0x0, 0x18, 0xef, 0x3, 0x1, 0x10, 0x0, 0x2, 0x0, 0x4, 0x9, 0x2], length=14):
			out = OutPacket(data=[0x8, 0x0, 0x0, 0x18, 0x1, 0x10, 0xef, 0x3, 0x0, "XX", 0x0, 0x8, 0x20, 0x10, 0x0, 0x0])
			# self.helix_usb.out_packet_to_endpoint_0x1(out)
			self.helix_usb.start_x1x10_keep_alive_thread(delay=0.0)

		elif self.helix_usb.my_byte_cmp(left=data, right=[0x11, 0x0, 0x0, 0x18, 0xf0, 0x3, 0x2, 0x10, 0x0, 0x2], length=10):
			self.received_x11_on_x2 = True
			self.helix_usb.x1x10_cnt = 0x2
			out = OutPacket(data=[0xc, 0x0, 0x0, 0x28, 0x1, 0x10, 0xef, 0x3, 0x0, 0x0, 0x0, 0x2, 0x0, 0x1, 0x0, 0x21, 0x0, 0x10, 0x0, 0x0])
			self.helix_usb.out_packet_to_endpoint_0x1(out)

		elif self.helix_usb.my_byte_cmp(left=data, right=[0x11, 0x0, 0x0, 0x18, 0xed, 0x3, 0x80, 0x10, 0x0, 0x2], length=10):
			self.received_x11_on_x80 = True

		# x1x10: start 2
		elif self.helix_usb.my_byte_cmp(left=data, right=[0x11, 0x0, 0x0, 0x18, 0xf0, 0x3, 0x2, 0x10, 0x0, 0x2, 0x0, 0x4, 0x9, 0x2, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x1, 0x0, 0x0, 0x0, 0x4, 0x50, 0x33, 0x33], length=20):
			out = OutPacket(data=[0x11, 0x0, 0x0, 0x18, 0x1, 0x10, 0xef, 0x3, 0x0, "XX", 0x0, 0x4, 0x0, 0x10, 0x0, 0x0, 0x1, 0x0, 0x2, 0x0, 0x1, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0])
			self.helix_usb.out_packet_to_endpoint_0x1(out)

		elif self.helix_usb.check_keep_alive_response(data):
			if data[6] == 0x1:
				self.alive_msg_counter[0] += 1
			elif data[6] == 0x2:
				self.alive_msg_counter[1] += 1
			elif data[6] == 0x80:
				self.alive_msg_counter[2] += 1

			if self.alive_msg_counter[0] > 1 and self.alive_msg_counter[1] > 1 and self.alive_msg_counter[2] > 1:
				log.info("Connect finished")
				self.helix_usb.switch_mode("RequestPresetName")
		else:
			hex_str = ''.join('0x{:x}, '.format(x) for x in data)
			log.warning("Unexpected message in connect mode: " + str(hex_str))

		if self.reset_x1x10_done is False:
			if self.received_x11_on_x2 and self.received_x11_on_x80 and self.alive_msg_counter[0] > 1:
				log.info("RESETTING x1")
				self.reset_x1x10_done = True
				self.helix_usb.x1x10_cnt = 0x2
				out = OutPacket(data=[0xc, 0x0, 0x0, 0x28, 0x1, 0x10, 0xef, 0x3, 0x0, 0x0, 0x0, 0x2, 0x0, 0x1, 0x0, 0x21, 0x0, 0x10, 0x0, 0x0])
				self.helix_usb.out_packet_to_endpoint_0x1(out)
		'''