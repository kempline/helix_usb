from modes.standard import Standard
from out_packet import OutPacket
import logging
log = logging.getLogger(__name__)


class RequestPresetNames(Standard):
	def __init__(self, helix_usb):
		Standard.__init__(self, helix_usb=helix_usb, name="request_preset_names")
		self.preset_names_data = []

	def start(self):
		log.info('Starting mode')
		self.preset_names_data = []
		data = [0x1d, 0x0, 0x0, 0x18, 0x1, 0x10, 0xef, 0x3, 0x0, "XX", 0x0, 0xc, 0x38, 0x10, 0x0, 0x0, 0x1, 0x0, 0x2,
				0x0, 0xd, 0x0, 0x0, 0x0, 0x83, 0x66, 0xcd, 0x3, 0xea, 0x64, 0x1, 0x65, 0x82, 0x6b, 0x0, 0x65, 0x2, 0x0,
				0x0, 0x0]
		# data = [0x19, 0x0, 0x0, 0x18, 0x1, 0x10, 0xef, 0x3, 0x0, "XX", 0x0, 0x4, 0x1a, 0x10, 0x0, 0x0, 0x1, 0x0, 0x2, 0x0, 0x9, 0x0, 0x0, 0x0, 0x83, 0x66, 0xcd, 0x3, 0xe9, 0x64, 0x0, 0x65, 0xc0, 0x0, 0x0, 0x0]
		# data = [0x1a, 0x0, 0x0, 0x18, 0x1, 0x10, 0xef, 0x3, 0x0, "XX", 0x0, 0x4, 0x9, 0x10, 0x0, 0x0, 0x1, 0x0, 0x2, 0x0, 0xa, 0x0, 0x0, 0x0, 0x83, 0x66, 0xcd, 0x3, 0xe8, 0x64, 0xcc, 0xfe, 0x65, 0x80, 0x0, 0x0]
		self.helix_usb.endpoint_0x1_out(data, silent=True)

	def shutdown(self):
		log.info('Shutting down mode')

	def parse_preset_names(self):
		# all_presets = ''
		all_data = list()
		for packet in self.preset_names_data:
			# hex_str = ''.join('0x{:x}, '.format(x) for x in packet)
			# all_presets += hex_str
			# ToDo: Move this into the append data function underneath
			for b in packet[16:]:
				all_data.append(b)

		pattern = [0x81, 0xcd, 0x0]
		indexes = [(i, i + len(pattern)) for i in range(len(all_data)) if all_data[i:i + len(pattern)] == pattern]

		for index in indexes:
			name_start_idx = index[1]
			program_number = all_data[name_start_idx]
			name = ''
			for j in range(name_start_idx + 6, name_start_idx + 16 + 6):
				if all_data[j] == 0x0:
					break
				name += chr(all_data[j])
			# log.info(str(program_number) + ' - ' + name)
		log.info('Received preset names: ' + str(len(indexes)))

	def data_in(self, data_in):
		if self.helix_usb.check_keep_alive_response(data_in):
			return False  # don't print incoming message to console

		elif self.helix_usb.my_byte_cmp(left=data_in, right=[0x8, 0x1, 0x0, 0x18, 0xef, 0x3, 0x1, 0x10, 0x0, "XX", 0x0, 0x4, "XX", 0x2, 0x0, 0x0, "XX"], length=17):
			# one packet
			self.preset_names_data.append(data_in)
			out = OutPacket(data=[0x8, 0x0, 0x0, 0x18, 0x1, 0x10, 0xef, 0x3, 0x0, "XX", 0x0, 0x8, 0x38, data_in[9]+9, 0x0, 0x0])
			self.helix_usb.out_packet_to_endpoint_0x1(out, silent=True)

		elif self.helix_usb.my_byte_cmp(left=data_in, right=["XX", 0x0, 0x0, 0x18, 0xef, 0x3, 0x1, 0x10, 0x0, "XX", 0x0, 0x4, "XX", 0x2, 0x0, 0x0], length=16):
			# last packet
			out = OutPacket(data=[0x8, 0x0, 0x0, 0x18, 0x1, 0x10, 0xef, 0x3, 0x0, "XX", 0x0, 0x8, 0x38, data_in[9] + 9, 0x0, 0x0])
			self.helix_usb.out_packet_to_endpoint_0x1(out, silent=True)

			self.preset_names_data.append(data_in)
			self.parse_preset_names()
			# print(self.preset_names_data)
			self.helix_usb.got_preset_names = True
			self.helix_usb.switch_mode()

		else:
			hex_str = ''.join('0x{:x}, '.format(x) for x in data_in)
			log.warning("Unexpected message in connect mode: " + str(hex_str))

		return True  # print incoming message to console